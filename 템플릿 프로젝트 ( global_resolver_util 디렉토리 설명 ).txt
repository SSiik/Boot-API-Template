global
   resolver
        memberinfo 디렉토리
	MemberInfo.java  // 어노테이션 선언부
		public @interface MemberInfo{}
		위 처럼 내용이 되어있는데, MemberInfo 라는 어노테이션을 만들어 쓰는거 같습니다.
		@Target(ElementType.PARAMETER) 로 되있는걸로 보아, PARAMETER에서 사용가능한 어노테이션으로 정의
		@Retention(RetentionPolicy.RUNTIME) 어노테이션
			retention은 즉 해당 "라이프 사이클"을 정의 어노테이션이 언제까지 살아남아있을지를 정한다.
			RetentionPolicy.SOURCE : 소스 코드(.java)까지 남아있는다.
			RetentionPolicy.CLASS : 클래스 파일(.class)까지 남아있는다.(=바이트 코드)
			RetentionPolicy.RUNTIME : 런타임까지 남아있는다.(=사실상 안 사라진다.)

	MemberInfoDto
		내부에 필드값 Long memberId , Role role을 가짐	



	MemberInfoArgumentResolver.java
		아규먼트리졸버를 정의하기 위해서 "HandlerMethodArgumentResolver"를 implements하고
		supportsParameter 메소드와 resolveArgument 메소드를 구현(override) 합니다.

		supportsParameter(MethodParameter parameter)   <- 어떤 파라미터에 대해서 아규먼트리졸버를 지원할것인가에 대한 정의메소드
			parameter.hasParameterAnnotation(MemberInfo.class) // 파라미터에 @MemberInfo 어노테이션이 붙어 있고
			MemberInfoDto.class.isAssignableFrom(parameter.getParameterType()); // @MemberInfo 어노테이션 뒤에 붙은 자료형 타입이 MemberInfoDto 형이고

			이거 두개를 만족할때 true를 반환하게 한다. 두개의 조건을 &&로 합쳐서 return 해야겠죠

		resolveArgument 메소드 
			파라미터인 NatvieWebRequest에서 getNativeRequest()를 통해서 HttpServletRequest를 획득하고
			토큰을 획득하고.. 거기서 Claim정보를 얻어내고 거기 내부에서 여러요소들을 뽑아내 MemberInfoDto를 만들어내서 return 합니다.		


	-> 이렇게하면 Parameter에 있는 @MeberInfo MemberInfoDto member , 에서 들어온 멤버정보를 바로 꺼내서 메소드 부에서 비즈니스 로직을 작성할수 있겠죠.


        
        util 디렉토리
	AuthorizationHeaderUtils.java
		validateAuthorization 메소드 존재
			말그대로 Authorization Header에 들어온 값을 판별하기 위한 컴포넌트
	
	DateTimeUtils.java
		Date를 LocalDateTime객체로 변환해주는 메소드만 들어가 있습니다.
			return date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();